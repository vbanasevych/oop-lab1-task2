//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\oop-projects\version_tests\oop-lab1-task2-master\oop_lab1_task2\MyExel.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace oop_lab1_task2 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyExelLexer : Lexer {
	public const int
		INC=1, DEC=2, MOD=3, DIV=4, MULTIPLY=5, DIVIDE=6, SUBTRACT=7, ADD=8, LPAREN=9, 
		RPAREN=10, CELL_REF=11, NUMBER=12, WS=13;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INC", "DEC", "MOD", "DIV", "MULTIPLY", "DIVIDE", "SUBTRACT", "ADD", "LPAREN", 
		"RPAREN", "CELL_REF", "NUMBER", "WS"
	};


	public MyExelLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'*'", "'/'", "'-'", "'+'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INC", "DEC", "MOD", "DIV", "MULTIPLY", "DIVIDE", "SUBTRACT", "ADD", 
		"LPAREN", "RPAREN", "CELL_REF", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyExel.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\xFO\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3"+
		"\v\x3\f\x6\f;\n\f\r\f\xE\f<\x3\f\x6\f@\n\f\r\f\xE\f\x41\x3\r\x6\r\x45"+
		"\n\r\r\r\xE\r\x46\x3\xE\x6\xEJ\n\xE\r\xE\xE\xEK\x3\xE\x3\xE\x2\x2\x2\xF"+
		"\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13"+
		"\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x3\x2\r\x4\x2KKkk\x4\x2PP"+
		"pp\x4\x2\x45\x45\x65\x65\x4\x2\x46\x46\x66\x66\x4\x2GGgg\x4\x2OOoo\x4"+
		"\x2QQqq\x4\x2XXxx\x4\x2\x43\\\x63|\x3\x2\x32;\x5\x2\v\f\xF\xF\"\"R\x2"+
		"\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2"+
		"\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x3\x1D\x3\x2\x2\x2\x5!\x3\x2\x2\x2\a%\x3\x2\x2"+
		"\x2\t)\x3\x2\x2\x2\v-\x3\x2\x2\x2\r/\x3\x2\x2\x2\xF\x31\x3\x2\x2\x2\x11"+
		"\x33\x3\x2\x2\x2\x13\x35\x3\x2\x2\x2\x15\x37\x3\x2\x2\x2\x17:\x3\x2\x2"+
		"\x2\x19\x44\x3\x2\x2\x2\x1BI\x3\x2\x2\x2\x1D\x1E\t\x2\x2\x2\x1E\x1F\t"+
		"\x3\x2\x2\x1F \t\x4\x2\x2 \x4\x3\x2\x2\x2!\"\t\x5\x2\x2\"#\t\x6\x2\x2"+
		"#$\t\x4\x2\x2$\x6\x3\x2\x2\x2%&\t\a\x2\x2&\'\t\b\x2\x2\'(\t\x5\x2\x2("+
		"\b\x3\x2\x2\x2)*\t\x5\x2\x2*+\t\x2\x2\x2+,\t\t\x2\x2,\n\x3\x2\x2\x2-."+
		"\a,\x2\x2.\f\x3\x2\x2\x2/\x30\a\x31\x2\x2\x30\xE\x3\x2\x2\x2\x31\x32\a"+
		"/\x2\x2\x32\x10\x3\x2\x2\x2\x33\x34\a-\x2\x2\x34\x12\x3\x2\x2\x2\x35\x36"+
		"\a*\x2\x2\x36\x14\x3\x2\x2\x2\x37\x38\a+\x2\x2\x38\x16\x3\x2\x2\x2\x39"+
		";\t\n\x2\x2:\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2"+
		"=?\x3\x2\x2\x2>@\t\v\x2\x2?>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41?\x3\x2\x2"+
		"\x2\x41\x42\x3\x2\x2\x2\x42\x18\x3\x2\x2\x2\x43\x45\t\v\x2\x2\x44\x43"+
		"\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2"+
		"G\x1A\x3\x2\x2\x2HJ\t\f\x2\x2IH\x3\x2\x2\x2JK\x3\x2\x2\x2KI\x3\x2\x2\x2"+
		"KL\x3\x2\x2\x2LM\x3\x2\x2\x2MN\b\xE\x2\x2N\x1C\x3\x2\x2\x2\a\x2<\x41\x46"+
		"K\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace oop_lab1_task2
